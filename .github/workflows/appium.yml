name: Running Appium Tests

on:
  workflow_run:
    workflows: [Flutter CI - Generate APK]
    types: 
      - completed
  
jobs:
  on-success:
    runs-on: macos-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    matrix:
        api-level: [25] #Google api level
        target: [default]
        node-version: [14.x]
    #steps:
    #- name: Download artifact as .zip
    #  uses: actions/github-script@v6
    #  with:
    #      script: |
    #        let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           run_id: context.payload.workflow_run.id,
    #        });
    #        let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
    #          return artifact.name == "pr_number"
    #        })[0];
    #        let download = await github.rest.actions.downloadArtifact({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           artifact_id: matchArtifact.id,
    #           archive_format: 'zip',
    #        });
    #        let fs = require('fs');
    #        fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/android-apk.zip`, Buffer.from(download.data));  

    #- name: Unzip artifact as .APK
    #  run: unzip -l android-apk.zip

  #test:
  #  runs-on: macos-latest
  #  strategy: # we are using strategy if we need to run on parallel with different devices and version
  #    matrix:
  #      api-level: [25] #Google api level
  #      target: [default]
  #      node-version: [14.x]
    steps:
    - name: Checkout ✔️
      uses: actions/checkout@v3 #checkout the code 

    - name: Use Node.js ${{ matrix.node-version }} 🔨
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install NPM dependencies 📦
      run: |
        cd appium-tests && npm ci

    - name: Install and Run Appium Server 📱
      run: |
        chmod +x ./appium-tests/scripts/run_appium_server.sh # install and run appium server in the background
        ./appium-tests/scripts/run_appium_server.sh
    
    - name: Run Appium Tests 🌡️
      uses: reactivecircus/android-emulator-runner@v2 # install and create the Emulator
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: x86_64
        profile: Nexus 6
        script: cd appium-tests && npm run android.ci # running our test with info to check the results
